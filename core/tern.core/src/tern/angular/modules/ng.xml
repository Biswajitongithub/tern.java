<module name="ng">

	<!-- See http://docs.angularjs.org/api/ng -->

	<directive name="ngApp"
		url="http://docs.angularjs.org/api/ng.directive:ngApp"
		type="module"
		optionnal="true" >
		<description>
		<![CDATA[
			Use this directive to auto-bootstrap an AngularJS
			application. The
			ngApp directive designates the root element of the
			application and is
			typically placed near the root element of the page
			- e.g. on the
			<body>
			or
			<html> tags.
			]]>
		</description>
	</directive>

	<directive name="ngBlur"
		url="http://docs.angularjs.org/api/ng.directive:ngBlur" 
		tags="window, input, select, textarea, a">
		<description>
		<![CDATA[
			Specify custom behavior on blur event.
			]]>
		</description>
	</directive>

	<directive name="ngChange"
		url="http://docs.angularjs.org/api/ng.directive:ngChange" 
		tags="input">
		<description>
				<![CDATA[
			Evaluate given expression when user changes the input.
			The expression is not evaluated when the value change is coming from
			the model.

			Note, this directive requires ngModel to be present.
			]]>
		</description>
	</directive>

	<directive name="ngClass"
		url="http://docs.angularjs.org/api/ng.directive:ngClass"
		use-as="attr class"  >
		<description>
		<![CDATA[
			The ngClass directive allows you to dynamically set CSS classes on an HTML element by databinding an expression that represents all classes to be added.

			The directive won't add duplicate classes if a particular class was already set.

			When the expression changes, the previously added classes are removed and only then the new classes are added.
			]]>
		</description>
	</directive>
	
	<directive name="ngClick"
		url="http://docs.angularjs.org/api/ng.directive:ngClick">
		<description>
				<![CDATA[
The ngClick directive allows you to specify custom behavior when an element is clicked.]]>
		</description>
	</directive>

	<directive name="ngCloak"
		url="http://docs.angularjs.org/api/ng.directive:ngCloak"
		use-as="attr class"
		optionnal="true" >
		<description>
				<![CDATA[
The ngCloak directive is used to prevent the Angular html template from being briefly displayed by the browser in its raw (uncompiled) form while your application is loading. Use this directive to avoid the undesirable flicker effect caused by the html template display.

The directive can be applied to the <body> element, but the preferred usage is to apply multiple ngCloak directives to small portions of the page to permit progressive rendering of the browser view.

ngCloak works in cooperation with the following css rule embedded within angular.js and angular.min.js. For CSP mode please add angular-csp.css to your html file (see ngCsp).]]>
		</description>
	</directive>
	
	<directive name="ngController"
		url="http://docs.angularjs.org/api/ng.directive:ngController"
		type="controller"  >
		<description>
		<![CDATA[
			The <code>ngController</code> directive attaches a controller class to the view. This is a key aspect of how angular
supports the principles behind the Model-View-Controller design pattern.
<p>MVC components in angular:</p>
<ul>
<li>Model — The Model is scope properties; scopes are attached to the DOM where scope properties
are accessed through bindings.</li>
<li>View — The template (HTML with data bindings) that is rendered into the View.</li>
<li>Controller — The <code>ngController</code> directive specifies a Controller class; the class contains business
logic behind the application to decorate the scope with functions and values</li>
</ul>
<p>Note that you can also attach controllers to the DOM by declaring it in a route definition
via the <a href="api/ngRoute.$route">$route</a> service. A common mistake is to declare the controller
again using <code>ng-controller</code> in the template itself.  This will cause the controller to be attached
and executed twice.</p>
]]>
		</description>
	</directive>

	<directive name="ngModel"
		url="http://docs.angularjs.org/api/ng.directive:ngModel" tags="input, select, textarea"
		type="model" >
		<description>
			The ngModel directive binds an input,select, textarea (or
			custom form control) to a property on the scope using
			NgModelController, which is created and exposed by this directive.
		</description>
	</directive>

	<directive name="ngRepeat"
		url="http://docs.angularjs.org/api/ng.directive:ngRepeat"
		type="directiveRepeat" >
		<description>
		<![CDATA[
			The ngRepeat directive instantiates a template once per item from a collection. Each template instance gets its own scope, where the given loop variable is set to the current collection item, and $index is set to the item index or key.
			]]>
		</description>
	</directive>

	<directive name="ngSrc"
		url="http://docs.angularjs.org/api/ng.directive:ngSrc"
		tags="img" >
		<description>
		<![CDATA[
			Using Angular markup like {{hash}} in a src attribute doesn't work right: The browser will fetch from the URL with the literal text {{hash}} until Angular replaces the expression inside {{hash}}. 
			The ngSrc directive solves this problem.
			]]>
		</description>
	</directive>
	
	<directive name="ngStyle"
		url="http://docs.angularjs.org/api/ng.directive:ngStyle"
		use-as="attr class" >
		<description>
		<![CDATA[
			The ngStyle directive allows you to set CSS style on an HTML element conditionally.
			]]>
		</description>
	</directive>
	
	<directive name="ngSubmit"
		url="http://docs.angularjs.org/api/ng.directive:ngSubmit" tags="form">
		<description>
		<![CDATA[
			Enables binding angular expressions to onsubmit events.

Additionally it prevents the default action (which for form means sending the request to the server and reloading the current page) but only if the form does not contain an action attribute.
			]]>
		</description>
	</directive>

</module>