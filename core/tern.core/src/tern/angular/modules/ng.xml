<module name="ng">

	<!-- See http://docs.angularjs.org/api/ng -->

	<directive name="ngApp"
		url="http://docs.angularjs.org/api/ng.directive:ngApp"
		type="module"
		value="optional" >
		<description>
		<![CDATA[
			Use this directive to auto-bootstrap an AngularJS
			application. The
			ngApp directive designates the root element of the
			application and is
			typically placed near the root element of the page
			- e.g. on the
			<body>
			or
			<html> tags.
			]]>
		</description>
	</directive>
	
	<directive name="ngBind"
		url="http://docs.angularjs.org/api/ng.directive:ngBind"
		value="required" 
		restrict="AC" >
		<description>
		<![CDATA[
The ngBind attribute tells Angular to replace the text content of the specified HTML element with the value of a given expression, and to update the text content when the value of that expression changes.

Typically, you don't use ngBind directly, but instead you use the double curly markup like {{ expression }} which is similar but less verbose.

It is preferrable to use ngBind instead of {{ expression }} when a template is momentarily displayed by the browser in its raw state before Angular compiles it. Since ngBind is an element attribute, it makes the bindings invisible to the user while the page is loading.
			]]>
		</description>
	</directive>	

	<directive name="ngBindHtml"
		url="http://docs.angularjs.org/api/ng.directive:ngBindHtml"
		value="required" >
		<description>
		<![CDATA[
Creates a binding that will innerHTML the result of evaluating the expression into the current element in a secure way. 

By default, the innerHTML-ed content will be sanitized using the $sanitize service. 

To utilize this functionality, ensure that $sanitize is available, for example, by including ngSanitize in your module's dependencies (not in core Angular.) 
You may also bypass sanitization for values you know are safe. To do so, bind to an explicitly trusted value via $sce.trustAsHtml. 
See the example under Strict Contextual Escaping (SCE).
			]]>
		</description>
	</directive>

	<directive name="ngBindTemplate"
		url="http://docs.angularjs.org/api/ng.directive:ngBindTemplate"
		value="required" >
		<description>
		<![CDATA[
The ngBindTemplate directive specifies that the element text content should be replaced with the interpolation of the template in the ngBindTemplate attribute.

Unlike ngBind, the ngBindTemplate can contain multiple {{ }} expressions. This directive is needed since some HTML elements (such as TITLE and OPTION) cannot contain SPAN elements.
			]]>
		</description>
	</directive>
		
	<directive name="ngBlur"
		url="http://docs.angularjs.org/api/ng.directive:ngBlur" 
		value="required"
		tags="window, input, select, textarea, a">
		<description>
		<![CDATA[
			Specify custom behavior on blur event.
			]]>
		</description>
	</directive>

	<directive name="ngChange"
		url="http://docs.angularjs.org/api/ng.directive:ngChange" 
		value="required"
		tags="input">
		<description>
				<![CDATA[
			Evaluate given expression when user changes the input.
			The expression is not evaluated when the value change is coming from
			the model.

			Note, this directive requires ngModel to be present.
			]]>
		</description>
	</directive>

	<directive name="ngChecked"
		url="http://docs.angularjs.org/api/ng.directive:ngChecked"
		value="required" 
		tags="input">
		<description>
				<![CDATA[
The HTML specification does not require browsers to preserve the values of boolean attributes such as checked. 
(Their presence means true and their absence means false.) 
If we put an Angular interpolation expression into such an attribute then the binding information would be lost when the browser removes the attribute. 
The ngChecked directive solves this problem for the checked attribute. 
This complementary directive is not removed by the browser and so provides a permanent reliable place to store the binding information.
			]]>
		</description>
	</directive>
	
	<directive name="ngClass"
		url="http://docs.angularjs.org/api/ng.directive:ngClass"
		value="required"
		restrict="AC"  >
		<description>
		<![CDATA[
			The ngClass directive allows you to dynamically set CSS classes on an HTML element by databinding an expression that represents all classes to be added.

			The directive won't add duplicate classes if a particular class was already set.

			When the expression changes, the previously added classes are removed and only then the new classes are added.
			]]>
		</description>
	</directive>

	<directive name="ngClassEven"
		url="http://docs.angularjs.org/api/ng.directive:ngClassEven"
		value="required"
		restrict="AC"  >
		<description>
		<![CDATA[
			The ngClassOdd and ngClassEven directives work exactly as ngClass, except they work in conjunction with ngRepeat and take effect only on odd (even) rows.

			This directive can be applied only within the scope of an ngRepeat.
			]]>
		</description>
	</directive>

	<directive name="ngClassOdd"
		url="http://docs.angularjs.org/api/ng.directive:ngClassOdd"
		value="required"
		restrict="AC"  >
		<description>
		<![CDATA[
			The ngClassOdd and ngClassEven directives work exactly as ngClass, except they work in conjunction with ngRepeat and take effect only on odd (even) rows.

			This directive can be applied only within the scope of an ngRepeat.
			]]>
		</description>
	</directive>
		
	<directive name="ngClick"
		url="http://docs.angularjs.org/api/ng.directive:ngClick"
		value="required" >
		<description>
				<![CDATA[
The ngClick directive allows you to specify custom behavior when an element is clicked.]]>
		</description>
	</directive>

	<directive name="ngCloak"
		url="http://docs.angularjs.org/api/ng.directive:ngCloak"
		value="none"
		restrict="AC" >
		<description>
				<![CDATA[
The ngCloak directive is used to prevent the Angular html template from being briefly displayed by the browser in its raw (uncompiled) form while your application is loading. Use this directive to avoid the undesirable flicker effect caused by the html template display.

The directive can be applied to the <body> element, but the preferred usage is to apply multiple ngCloak directives to small portions of the page to permit progressive rendering of the browser view.

ngCloak works in cooperation with the following css rule embedded within angular.js and angular.min.js. For CSP mode please add angular-csp.css to your html file (see ngCsp).]]>
		</description>
	</directive>
	
	<directive name="ngController"
		url="http://docs.angularjs.org/api/ng.directive:ngController"
		type="controller"
		value="required" >
		<description>
		<![CDATA[
			The <code>ngController</code> directive attaches a controller class to the view. This is a key aspect of how angular
supports the principles behind the Model-View-Controller design pattern.
<p>MVC components in angular:</p>
<ul>
<li>Model — The Model is scope properties; scopes are attached to the DOM where scope properties
are accessed through bindings.</li>
<li>View — The template (HTML with data bindings) that is rendered into the View.</li>
<li>Controller — The <code>ngController</code> directive specifies a Controller class; the class contains business
logic behind the application to decorate the scope with functions and values</li>
</ul>
<p>Note that you can also attach controllers to the DOM by declaring it in a route definition
via the <a href="api/ngRoute.$route">$route</a> service. A common mistake is to declare the controller
again using <code>ng-controller</code> in the template itself.  This will cause the controller to be attached
and executed twice.</p>
]]>
		</description>
	</directive>

	<directive name="ngHref"
		url="http://docs.angularjs.org/api/ng.directive:ngHref"
		value="required"
		tags="a" >
		<description>
			Using Angular markup like {{hash}} in an href attribute will make the link go to the wrong URL if the user clicks it before Angular has a chance to replace the {{hash}} markup with its value. 
			Until Angular replaces the markup the link will be broken and will most likely return a 404 error.
			The ngHref directive solves this problem.
		</description>
	</directive>
	
	<directive name="ngInclude"
		url="http://docs.angularjs.org/api/ng.directive:ngInclude"
		restrict="ECA" >
		<description>
			Fetches, compiles and includes an external HTML fragment.
		</description>
		<parameters>
		    <parameter name="src" types="string">angular expression evaluating to URL. If the source is a string constant, make sure you wrap it in quotes, e.g. src="'myPartialTemplate.html'".</parameter>
		    <parameter name="onload" types="string" optional="true" >Expression to evaluate when a new partial is loaded.</parameter>
		    <parameter name="autoscroll" types="string" optional="true" >Whether ngInclude should call $anchorScroll to scroll the viewport after the content is loaded.
 - If the attribute is not set, disable scrolling.
 _ If the attribute is set without value, enable scrolling.
 - Otherwise enable scrolling only if the expression evaluates to truthy value.</parameter>
		</parameters>
	</directive>

	<directive name="ngModel"
		url="http://docs.angularjs.org/api/ng.directive:ngModel" 
		tags="input, select, textarea"
		type="model" >
		<description>
			The ngModel directive binds an input,select, textarea (or
			custom form control) to a property on the scope using
			NgModelController, which is created and exposed by this directive.
		</description>
	</directive>

	<directive name="ngPluralize"
		url="http://docs.angularjs.org/api/ng.directive:ngPluralize"
		restrict="EA" >
		<description>
			ngPluralize is a directive that displays messages according to en-US localization rules. 
			These rules are bundled with angular.js, but can be overridden (see Angular i18n dev guide). 
			You configure ngPluralize directive by specifying the mappings between plural categories and the strings to be displayed.
		</description>
		<parameters>
		    <parameter name="count" types="string, expression">The variable to be bounded to.</parameter>
		    <parameter name="when" types="string">The mapping between plural category to its corresponding strings.</parameter>
		    <parameter name="offset" types="number" optional="true">Offset to deduct from the total number.</parameter>
		</parameters>		
	</directive>
	
	<directive name="ngRepeat"
		url="http://docs.angularjs.org/api/ng.directive:ngRepeat"
		type="repeat_expression"
		value="required" >
		<description>
		<![CDATA[
			The ngRepeat directive instantiates a template once per item from a collection. Each template instance gets its own scope, where the given loop variable is set to the current collection item, and $index is set to the item index or key.
			]]>
		</description>
	</directive>

	<directive name="ngShow"
		url="http://docs.angularjs.org/api/ng.directive:ngShow"
		value="required" >
		<description>
		<![CDATA[
			The ngShow directive shows or hides the given HTML element based on the expression provided to the ngShow attribute. 
			The element is shown or hidden by removing or adding the ng-hide CSS class onto the element. 
			The .ng-hide CSS class is predefined in AngularJS and sets the display style to none (using an !important flag).
			]]>
		</description>
	</directive>
	
	<directive name="ngSrc"
		url="http://docs.angularjs.org/api/ng.directive:ngSrc"
		value="required"
		tags="img" >
		<description>
		<![CDATA[
			Using Angular markup like {{hash}} in a src attribute doesn't work right: The browser will fetch from the URL with the literal text {{hash}} until Angular replaces the expression inside {{hash}}. 
			The ngSrc directive solves this problem.
			]]>
		</description>
	</directive>

	<directive name="ngSrcset"
		url="http://docs.angularjs.org/api/ng.directive:ngSrcset"
		value="required"
		tags="img" >
		<description>
		<![CDATA[
			Using Angular markup like {{hash}} in a srcset attribute doesn't work right: The browser will fetch from the URL with the literal text {{hash}} until Angular replaces the expression inside {{hash}}. 
			
			The ngSrcset directive solves this problem.
			]]>
		</description>
	</directive>
		
	<directive name="ngStyle"
		url="http://docs.angularjs.org/api/ng.directive:ngStyle"
		value="required"
		restrict="AC" >
		<description>
		<![CDATA[
			The ngStyle directive allows you to set CSS style on an HTML element conditionally.
			]]>
		</description>
	</directive>
	
	<directive name="ngSubmit"
		url="http://docs.angularjs.org/api/ng.directive:ngSubmit" 
		value="required"
		tags="form">
		<description>
		<![CDATA[
			Enables binding angular expressions to onsubmit events.

Additionally it prevents the default action (which for form means sending the request to the server and reloading the current page) but only if the form does not contain an action attribute.
			]]>
		</description>
	</directive>

</module>