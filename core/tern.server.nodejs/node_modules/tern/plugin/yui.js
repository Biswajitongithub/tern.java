(function(mod) {
  if (typeof exports == "object" && typeof module == "object") // CommonJS
    return mod(require("../lib/infer"), require("../lib/tern"));
  if (typeof define == "function" && define.amd) // AMD
    return define(["../lib/infer", "../lib/tern"], mod);
  mod(tern, tern);
})(function(infer, tern) {
  "use strict";
  
  function Module() {
    this.def = null;
  }
  
  function getModule(data, name) {
    if (!data.initialized) {
      infer.def.load(yuiEventBase);
      infer.def.load(yuiNodeCore);      
      data.initialized = true;
    }    
    return data.modules[name];// || (data.modules[name] = new infer.AVal);
  }
  
  function injectModule(Y, name, isPrototype) {
    var cx = infer.cx(), server = cx.parent, data = server._yui, module = getModule(data, name);
    if (module) { 
      if (isPrototype) {
        module.def.getProp('prototype').getType().propagate(Y);
      } else {
        module.def.getType().propagate(Y);
      }
    }
  }
  
  function getFnIndex(argNodes) {
    for ( var i = 0; i < argNodes.length; i++) {
      if (argNodes[i].type == "FunctionExpression") {
        return i;
      }
    }
  }
  
  infer.registerFunction("yui_add", function(self, args, argNodes) {
    var yui = self.getType();
    if (yui && argNodes) {
      var index = getFnIndex(argNodes);
      if (index) {
        var fn = args[index];
        if (fn.argNames  && fn.argNames.length > 0) {        
          var Y = fn.args[0];
          yui.getProp("prototype").getType().propagate(Y); 
        }
      }      
    }
  });
  
  infer.registerFunction("yui_use", function(self, args, argNodes) {
    var yui = self.getType();
    if (yui && argNodes) {
      var index = getFnIndex(argNodes);
      if (index) {
        var fn = args[index];
        if (fn.argNames  && fn.argNames.length > 0) {              
          var Y = fn.args[0];
          yui.propagate(Y);        
          for ( var i = 0; i < argNodes.length - 1; i++) {
            var node = argNodes[i];
            if (node.type == "Literal" && typeof node.value == "string") {
              injectModule(Y, node.value);
            } else if (node.type == "ArrayExpression") for (var i = 0; i < node.elements.length; ++i) {
              var elt = node.elements[i];
              if (elt.type == "Literal" && typeof elt.value == "string") {
                injectModule(Y, elt.value);
              }
            }
          }
        }        
      }
    }
  });
  
  function preCondenseReach(state) {
    
  }

  function postLoadDef(data) {
    var cx = infer.cx(), server = cx.parent, _yui = server._yui;
    if (_yui) {
      var name = data["!name"], yuiModule = name && name.slice(0, 'yui:'.length) == 'yui:';
      if (yuiModule) {
        var moduleName = name.substring('yui:'.length, name.length), ns = moduleName.replace(/-/g, '_');
        var module = new Module();
        module.def = cx.definitions[name][ns];
        _yui.modules[moduleName] = module;
      }
    }
  }

  tern.registerPlugin("yui", function(server, options) {
    server._yui = {
        modules: Object.create(null),
    };
    
    server.on("reset", function() {
      this._yui.initialized = false;
      this._yui.modules = Object.create(null);      
    });
    
    return {
      defs: defs,
      passes: {
        preCondenseReach: preCondenseReach,
        postLoadDef: postLoadDef
      },
    };
  });
  
  var defs = {
    "!name": "YUI",
    "!define": {
      YUI: {
        prototype: {
          add: {
            "!type": "fn(name: string, fn: fn(Y: ?), version: string) -> !this",
            "!effects": ["custom yui_add"],
            "!url": "http://yuilibrary.com/yui/docs/api/classes/YUI.html#method_add",
            "!doc": "Registers a YUI module and makes it available for use in a YUI().use() call or as a dependency for other modules."
          },
          use: {
            "!type": "fn(modules: [string], callback: fn(Y: ?)) -> !this",
            "!effects": ["custom yui_use"],
            "!url": "http://yuilibrary.com/yui/docs/api/classes/YUI.html#method_use",
            "!doc": "Attaches one or more modules to the YUI instance. When this is executed, the requirements are analyzed, and one of several things can happen:"          
          },
          "!url": "http://yuilibrary.com/yui/docs/api/classes/YUI.html",
          "!doc": "The YUI global namespace object. This is the constructor for all YUI instances."
        }
      },
      
      EventHandle : {
        
      }
      
    }, 

    YUI: {
      "!type": "fn() -> +YUI",
      "!url": "...",
      "!doc": "...",
      
      add: {
        "!type": "fn(name: string, fn: fn(Y: ?), version: string) -> +YUI",
        "!effects": ["custom yui_add"],
        "!url": "http://yuilibrary.com/yui/docs/api/classes/YUI.html#method_add",
        "!doc": "Registers a YUI module and makes it available for use in a YUI().use() call or as a dependency for other modules."
      }
    }
  };
  
  var yuiEventBase = {
      "!name": "yui:event-base",
      "!define": {
        "event_base" : {
          DOMEventFacade: {
            "!type": "fn() -> +event_base.DOMEventFacade",
            "!url": "http://yuilibrary.com/yui/docs/api/classes/DOMEventFacade.html",
            "!doc": "Wraps a DOM event, properties requiring browser abstraction are fixed here. Provids a security layer when required.",
            prototype: {
              preventDefault:{
                "!type": "fn(returnValue: string)",
                "!url": "http://yuilibrary.com/yui/docs/api/classes/DOMEventFacade.html#method_preventDefault",
                "!doc": "Prevents the event's default behavior"
              },
              stopImmediatePropagation :{
                "!type": "fn()",
                "!url": "http://yuilibrary.com/yui/docs/api/classes/DOMEventFacade.html#method_stopImmediatePropagation",
                "!doc": "Stops the propagation to the next bubble target and prevents any additional listeners from being exectued on the current target."
              }
            }
          }  
        }
      }
  };
  
  var yuiNodeCore = {
      "!name": "yui:node-core",
      "!define": {
        "node_core": {
          Node:{
            "!type": "fn(node: HTMLElement) -> +node_core.Node",
            "!url": "http://yuilibrary.com/yui/docs/api/classes/Node.html",
            "!doc": "The Node class provides a wrapper for manipulating DOM Nodes. Node properties can be accessed via the set/get methods. Use Y.one() to retrieve Node instances.",          
            one: {          
              "!type": "fn(selector: string) -> +node_core.Node",
              "!url": "http://alloyui.com/api/classes/Node.html#method_one",
              "!doc": "Retrieves a single Node instance, the first element matching the given CSS selector. Returns null if no match found."
            },
            prototype: {
              addClass: {
                "!type": "fn(className: string) -> !this",
                "!url": "http://alloyui.com/api/classes/Node.html#method_addClass",
                "!doc": "Adds a class name to each node."
              },
              all: {
                "!type": "fn(selector: string) -> +node_core.NodeList",
                "!url": "http://alloyui.com/api/classes/Node.html#method_all",
                "!doc": "Retrieves a NodeList based on the given CSS selector."
              },
              on: {
                "!type": "fn(type: string, fn: fn(e: +event_base.DOMEventFacade), context?: ?, arg?: ?) -> +EventHandle ",
                "!url": "http://yuilibrary.com/yui/docs/api/classes/Node.html#method_on",
                "!doc": "Subscribe a callback function to execute in response to a DOM event or custom event."
              },
              setStyle: {
                "!type": "fn(attr: string, val: string) -> !this",
                "!url": "http://alloyui.com/api/classes/Node.html#method_setStyle",
                "!doc": "Sets a style property of the node. Use camelCase (e.g. 'backgroundColor') for multi-word properties."
              },
              setStyles: {
                "!type": "fn(hash: ?) -> !this",
                "!url": "http://alloyui.com/api/classes/Node.html#method_setStyles",
                "!doc": "Sets multiple style properties on the node. Use camelCase (e.g. 'backgroundColor') for multi-word properties."
              }
            }
          },
          NodeList:{
            "!type": "fn(nodes: ?) -> +node_core.NodeList",
            "!url": "http://yuilibrary.com/yui/docs/api/classes/NodeList.html",
            "!doc": "The NodeList class provides a wrapper for manipulating DOM NodeLists. NodeList properties can be accessed via the set/get methods. Use Y.all() to retrieve NodeList instances.", 
          },
          one: {          
            "!type": "fn(selector: string) -> +node_core.Node",
            "!url": "http://alloyui.com/api/classes/Node.html#method_one",
            "!doc": "Retrieves a single Node instance, the first element matching the given CSS selector. Returns null if no match found."
          }
        }
      }      
  }
  
});
