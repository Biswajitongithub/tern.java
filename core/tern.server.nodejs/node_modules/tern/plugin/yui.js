(function(mod) {
  if (typeof exports == "object" && typeof module == "object") // CommonJS
    return mod(require("../lib/infer"), require("../lib/tern"));
  if (typeof define == "function" && define.amd) // AMD
    return define(["../lib/infer", "../lib/tern"], mod);
  mod(tern, tern);
})(function(infer, tern) {
  "use strict";
  
  function Component() {
    this.use = null;
  }
  
  function getComponent(data, name) {
    return data.components[name];// || (data.modules[name] = new infer.AVal);
  }
  
  function Module() {
    this.def = null;
    this.requires = null;
  }
  
  function getOrCreateModule(data, name) {
    var module = data.modules[name];
    if (!module) {
      module = new Module();
      data.modules[name] = module;
    }
    return module;
  }
  
  function getModule(data, name) {
    if (!data.initialized) {
      infer.def.load(yuiEventAndNode);
      data.initialized = true;
    }    
    return data.modules[name];// || (data.modules[name] = new infer.AVal);
  }
  
  function injectModule(Y, name) {
    var cx = infer.cx(), server = cx.parent, data = server._yui, module = getModule(data, name);
    if (module) { 
      var def = module.def, requires = module.requires;
      if (def) {
        def.getType().propagate(Y);        
      }
      if (requires) {
        for ( var i = 0; i < requires.length; i++) {
          var moduleName = requires[i];
          injectModule(Y, moduleName);
        }
      }
    } else {
      var component = getComponent(data, name);
      if (component && component.use) {
        for ( var i = 0; i < component.use.length; i++) {
          var moduleName = component.use[i];
          injectModule(Y, moduleName);
        }
      }
    }
  }
  
  function getFnIndex(argNodes) {
    for ( var i = 0; i < argNodes.length; i++) {
      if (argNodes[i].type == "FunctionExpression") {
        return i;
      }
    }
  }
  
  infer.registerFunction("yui_add", function(self, args, argNodes) {
    var yui = self.getType();
    if (yui && argNodes) {
      var index = getFnIndex(argNodes);
      if (index) {
        var fn = args[index];
        if (fn.argNames  && fn.argNames.length > 0) {        
          var Y = fn.args[0];
          yui.getProp("prototype").getType().propagate(Y); 
        }
      }      
    }
  });
  
  infer.registerFunction("yui_use", function(self, args, argNodes) {
    var yui = self.getType();
    if (yui && argNodes) {
      var index = getFnIndex(argNodes);
      if (index) {
        var fn = args[index];
        if (fn.argNames  && fn.argNames.length > 0) {              
          var Y = fn.args[0];
          yui.propagate(Y);        
          for ( var i = 0; i < argNodes.length - 1; i++) {
            var node = argNodes[i];
            if (node.type == "Literal" && typeof node.value == "string") {
              injectModule(Y, node.value);
            } else if (node.type == "ArrayExpression") for (var i = 0; i < node.elements.length; ++i) {
              var elt = node.elements[i];
              if (elt.type == "Literal" && typeof elt.value == "string") {
                injectModule(Y, elt.value);
              }
            }
          }
        }        
      }
    }
  });
  
  function preCondenseReach(state) {
    
  }

  function postLoadDef(json) {
    var cx = infer.cx(), defName = json["!name"], defs = cx.definitions[defName], server = cx.parent, _yui = server._yui, yuiModule = defName && defName.slice(0, 'yui-'.length) == 'yui-';
    if (defs && yuiModule) for (var name in defs) {
      var obj = defs[name].getType();
      if (obj.metaData) {
        // it's a component
        var metaData = obj.metaData, componentName = null;
        for ( componentName in metaData) {
          var c = metaData[componentName];
          for(var prop in c) {
            switch(prop) {
            case 'plugins':
              break;
            case 'submodules':
              var submodules = c[prop];
              for ( var submoduleName in submodules) {
                var submodule = submodules[submoduleName];
                var module = getOrCreateModule(_yui, submoduleName);
                module.requires = submodule.requires;
              }
              break;
            case 'use':
              var component = new Component();
              component.use = c[prop];
              _yui.components[componentName] = component;
              break;            
            }
          } 
        }       
      } else {
        // it's a module
        var moduleName = name.replace(/_/g, '-')
        var module = getOrCreateModule(_yui, moduleName);
        module.def = obj;
      }
    }
  }

  tern.registerPlugin("yui", function(server, options) {
    server._yui = {
        components: Object.create(null),
        modules: Object.create(null)
    };
    
    server.on("reset", function() {
      this._yui.initialized = false;
      this._yui.modules = Object.create(null);      
    });
    
    return {
      defs: defs,
      passes: {
        preCondenseReach: preCondenseReach,
        postLoadDef: postLoadDef
      },
    };
  });
  
  var defs = {
    "!name": "YUI",
    "!define": {
      YUI: {
        prototype: {
          add: {
            "!type": "fn(name: string, fn: fn(Y: ?), version: string) -> !this",
            "!effects": ["custom yui_add"],
            "!url": "http://yuilibrary.com/yui/docs/api/classes/YUI.html#method_add",
            "!doc": "Registers a YUI module and makes it available for use in a YUI().use() call or as a dependency for other modules."
          },
          use: {
            "!type": "fn(modules: [string], callback: fn(Y: ?)) -> !this",
            "!effects": ["custom yui_use"],
            "!url": "http://yuilibrary.com/yui/docs/api/classes/YUI.html#method_use",
            "!doc": "Attaches one or more modules to the YUI instance. When this is executed, the requirements are analyzed, and one of several things can happen:"          
          },
          "!url": "http://yuilibrary.com/yui/docs/api/classes/YUI.html",
          "!doc": "The YUI global namespace object. This is the constructor for all YUI instances."
        }
      }
      
    }, 

    YUI: {
      "!type": "fn() -> +YUI",
      "!url": "...",
      "!doc": "...",
      
      add: {
        "!type": "fn(name: string, fn: fn(Y: ?), version: string) -> +YUI",
        "!effects": ["custom yui_add"],
        "!url": "http://yuilibrary.com/yui/docs/api/classes/YUI.html#method_add",
        "!doc": "Registers a YUI module and makes it available for use in a YUI().use() call or as a dependency for other modules."
      }
    }
  };
  
  
  var yuiEventAndNode = {
      "!name": "yui-node",
      "!define": {
         "meta": {
          "!data": {
            
            "event": {
              "use": [
                  "event-base",
                  "event-delegate",
                  "event-synthetic",
                  "event-mousewheel",
                  "event-mouseenter",
                  "event-key",
                  "event-focus",
                  "event-resize",
                  "event-hover",
                  "event-outside",
                  "event-touch",
                  "event-move",
                  "event-flick",
                  "event-valuechange",
                  "event-tap"
              ],
              "after": ["node-base"],
              "submodules": {
                  "event-base": {
                      "after": ["node-base"],
                      "requires": [
                          "event-custom-base"
                      ]
                  },
                  "event-synthetic": {
                      "requires": [
                          "node-base",
                          "event-custom-complex"
                      ]
                  },
                  "event-delegate": {
                      "requires": [
                          "node-base"
                      ]
                  },
                  "event-focus": {
                      "requires": [
                          "event-synthetic"
                      ]
                  },
                  "event-key": {
                      "requires": [
                          "event-synthetic"
                      ]
                  },
                  "event-mouseenter": {
                      "requires": [
                          "event-synthetic"
                      ]
                  },
                  "event-mousewheel": {
                      "requires": [
                          "node-base"
                      ]
                  },
                  "event-resize": {
                      "requires": [
                          "node-base",
                          "event-synthetic"
                      ]
                  },
                  "event-hover": {
                      "requires": [
                          "event-mouseenter"
                      ]
                  },
                  "event-outside": {
                      "requires": [
                          "event-synthetic"
                      ]
                  },
                  "event-tap": {
                      "requires": [
                          "node-base",
                          "event-base",
                          "event-touch",
                          "event-synthetic"
                      ]
                  },
                  "event-contextmenu": {
                      "requires": [
                          "event-synthetic",
                          "dom-screen"
                      ]
                  }
              },
              "plugins": {
                  "event-touch": {
                      "requires" : [
                           "node-base"
                      ]
                  },
                  "event-base-ie": {
                      "requires": [
                          "node-base"
                      ],
                      "after": [
                          "event-base"
                      ],
                      "condition": {
                         "trigger": "node-base",
                         "test": "ie-base-test.js"
                      }
                  }
              }
          },
          
          "node": {
           "use": [
            "node-base",
            "node-event-delegate",
            "node-pluginhost",
            "node-screen",
            "node-style"
           ],
           "plugins": {
            "align-plugin": {
             "requires": [
              "node-screen",
              "node-pluginhost"
             ]
            },
            "node-event-simulate": {
             "requires": [
              "node-base",
              "event-simulate",
              "gesture-simulate"
             ]
            },
            "shim-plugin": {
             "requires": [
              "node-style",
              "node-pluginhost"
             ]
            },
            "node-load": {
             "requires": [
              "node-base",
              "io-base"
             ]
            }
           },
           "submodules": {
            "node-core": {
             "requires": [
              "dom-core",
              "selector"
             ]
            },
            "node-base": {
             "requires": [
              "event-base",
              "node-core",
              "dom-base",
              "dom-style"
             ]
            },
            "node-event-delegate": {
             "requires": [
              "node-base",
              "event-delegate"
             ]
            },
            "node-event-html5": {
             "requires": [
              "node-base"
             ]
            },
            "node-pluginhost": {
             "requires": [
              "node-base",
              "pluginhost"
             ]
            },
            "node-screen": {
             "requires": [
              "dom-screen",
              "node-base"
             ]
            },
            "node-style": {
             "requires": [
              "dom-style",
              "node-base"
             ]
            }
           }
          }
          }
         },
         
         "event_base" : {
           DOMEventFacade: {
             "!type": "fn() -> +event_base.DOMEventFacade",
             "!url": "http://yuilibrary.com/yui/docs/api/classes/DOMEventFacade.html",
             "!doc": "Wraps a DOM event, properties requiring browser abstraction are fixed here. Provids a security layer when required.",
             prototype: {
               preventDefault:{
                 "!type": "fn(returnValue: string)",
                 "!url": "http://yuilibrary.com/yui/docs/api/classes/DOMEventFacade.html#method_preventDefault",
                 "!doc": "Prevents the event's default behavior"
               },
               stopImmediatePropagation :{
                 "!type": "fn()",
                 "!url": "http://yuilibrary.com/yui/docs/api/classes/DOMEventFacade.html#method_stopImmediatePropagation",
                 "!doc": "Stops the propagation to the next bubble target and prevents any additional listeners from being exectued on the current target."
               },
               target : {
                 "!type": "+node_core.Node",
                 "!url": "http://yuilibrary.com/yui/docs/api/classes/DOMEventFacade.html#property_target",
                 "!doc": "Node reference for the targeted element"
               }
             }
           }
         },
         
         "event_custom" : {
           EventHandle: {
             "!type": "fn(evt: event_custom.CustomEvent, sub: event_custom.Subscriber) -> +event_custom.EventHandle",
             "!url": "http://yuilibrary.com/yui/docs/api/classes/EventHandle.html",
             "!doc": "Return value from all subscribe operations",
             prototype: {
               detach:{
                 "!type": "fn() -> number",
                 "!url": "http://yuilibrary.com/yui/docs/api/classes/EventHandle.html#method_detach",
                 "!doc": "Detaches this subscriber"
               },
               monitor :{
                 "!type": "fn()",
                 "!url": "http://yuilibrary.com/yui/docs/api/classes/DOMEventFacade.html#method_stopImmediatePropagation",
                 "!doc": "Stops the propagation to the next bubble target and prevents any additional listeners from being exectued on the current target."
               },
               evt : {
                 "!type": "+node_core.Node",
                 "!url": "http://yuilibrary.com/yui/docs/api/classes/DOMEventFacade.html#property_target",
                 "!doc": "Node reference for the targeted element"
               },
               sub : {
                 "!type": "+node_core.Node",
                 "!url": "http://yuilibrary.com/yui/docs/api/classes/DOMEventFacade.html#property_target",
                 "!doc": "Node reference for the targeted element"
               }
             }
           }
         },
         
         "node_core": {
           "Node": {
            "!type": "fn(node: HTMLElement) -> +node_core.Node",
            "!url": "http://yuilibrary.com/yui/docs/api/classes/Node.html",
            "!doc": "The Node class provides a wrapper for manipulating DOM Nodes. Node properties can be accessed via the set/get methods. Use Y.one() to retrieve Node instances.",
            "one": {
             "!type": "fn(selector: string) -> +node_core.Node",
             "!url": "http://alloyui.com/api/classes/Node.html#method_one",
             "!doc": "Retrieves a single Node instance, the first element matching the given CSS selector. Returns null if no match found."
            },
            "prototype": {
             "addClass": {
              "!type": "fn(className: string) -> !this",
              "!url": "http://alloyui.com/api/classes/Node.html#method_addClass",
              "!doc": "Adds a class name to each node."
             },
             "all": {
              "!type": "fn(selector: string) -> +node_core.NodeList",
              "!url": "http://alloyui.com/api/classes/Node.html#method_all",
              "!doc": "Retrieves a NodeList based on the given CSS selector."
             },
             "on": {
              "!type": "fn(type: string, fn: fn(e: +event_base.DOMEventFacade), context?: ?, arg?: ?) -> +EventHandle ",
              "!url": "http://yuilibrary.com/yui/docs/api/classes/Node.html#method_on",
              "!doc": "Subscribe a callback function to execute in response to a DOM event or custom event."
             },
             setHTML: {
               "!type": "fn(content: string) -> !this",
               "!url": "http://yuilibrary.com/yui/docs/api/classes/Node.html#method_setHTML",
               "!doc": "Replaces the node's current html content with the content provided. Note that this passes to innerHTML and is not escaped. Use Y.Escape.html() to escape html content or set('text') to add as text."
             },
             "setStyle": {
              "!type": "fn(attr: string, val: string) -> !this",
              "!url": "http://alloyui.com/api/classes/Node.html#method_setStyle",
              "!doc": "Sets a style property of the node. Use camelCase (e.g. 'backgroundColor') for multi-word properties."
             },
             "setStyles": {
              "!type": "fn(hash: ?) -> !this",
              "!url": "http://alloyui.com/api/classes/Node.html#method_setStyles",
              "!doc": "Sets multiple style properties on the node. Use camelCase (e.g. 'backgroundColor') for multi-word properties."
             }
            }
           },
           "NodeList": {
            "!type": "fn(nodes: ?) -> +node_core.NodeList",
            "!url": "http://yuilibrary.com/yui/docs/api/classes/NodeList.html",
            "!doc": "The NodeList class provides a wrapper for manipulating DOM NodeLists. NodeList properties can be accessed via the set/get methods. Use Y.all() to retrieve NodeList instances."
           },
           "one": {
            "!type": "fn(selector: string) -> +node_core.Node",
            "!url": "http://alloyui.com/api/classes/Node.html#method_one",
            "!doc": "Retrieves a single Node instance, the first element matching the given CSS selector. Returns null if no match found."
           }
          }
      
       }
      }
});
